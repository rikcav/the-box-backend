// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProfileEnum {
  USER
  SUPER_USER
}

enum PostCategoryEnum {
  TECHNOLOGY
  UNIVERSITY
  LIFESTYLE
  RESEARCH
}

model User {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  password        String
  profile         ProfileEnum
  phone           String
  blacklistTokens String[]    @default([])

  students   Student[]
  professors Professor[]
  materials  Material[]
  schedules  labSchedule[]
  posts      Post[]
  comments   Comment[]
  like       Like[]
  organizer  Organizer[]
  register   Register[]

  @@map("users")
}

model Student {
  enrollment String @id
  user_id    Int

  user User @relation(fields: [user_id], references: [id])

  @@map("students")
}

model Professor {
  enrollment String @id
  user_id    Int

  disciplines Discipline[]
  user        User         @relation(fields: [user_id], references: [id])

  @@map("professors")
}

model Discipline {
  id                    Int    @id @default(autoincrement())
  name                  String
  professor_enrollement String

  classes   Class[]
  professor Professor @relation(fields: [professor_enrollement], references: [enrollment])

  @@map("disciplines")
}

model Class {
  id            Int      @id @default(autoincrement())
  start_time    DateTime @db.Time()
  end_time      DateTime @db.Time()
  day_week      String
  discipline_id Int

  discipline Discipline @relation(fields: [discipline_id], references: [id])

  @@map("classes")
}

model Material {
  id          Int                  @id @default(autoincrement())
  title       String
  url         String
  description String               @db.Text
  type        TypeMaterial
  user_id     Int
  category    MaterialCategoryEnum

  user User @relation(fields: [user_id], references: [id])

  @@map("materials")
}

enum MaterialCategoryEnum {
  BAREMA
  REQUERIMENTO
  UNICO
  EDITAIS
  EDITAIS_DE_BOLSAS
  APOIO
  MANUAL_DOS_CALOUROS
}

enum TypeMaterial {
  DIDATICO
  FORMAL
}

model labSchedule {
  id         Int      @id @default(autoincrement())
  title      String
  start_time DateTime @db.Time()
  end_time   DateTime @db.Time()
  date       DateTime @db.Date
  user_id    Int
  lab_id     Int

  user User @relation(fields: [user_id], references: [id])
  lab  Lab  @relation(fields: [lab_id], references: [id])

  @@map("lab_schedule")
}

model Lab {
  id   Int    @id @default(autoincrement())
  code String
  name String

  schedules labSchedule[]

  @@map("labs")
}

model Post {
  id         Int              @id @default(autoincrement())
  title      String
  content    String           @db.Text
  created_at DateTime         @default(now())
  user_id    Int
  category   PostCategoryEnum

  user     User      @relation(fields: [user_id], references: [id])
  comments Comment[]

  @@map("posts")
}

model Comment {
  id         Int      @id @default(autoincrement())
  body       String   @db.Text
  user_id    Int
  post_id    Int
  created_at DateTime @default(now())

  user User   @relation(fields: [user_id], references: [id])
  post Post   @relation(fields: [post_id], references: [id])
  like Like[]

  @@map("comments")
}

model Like {
  id         Int      @id @default(autoincrement())
  user_id    Int
  comment_id Int
  create_at  DateTime @default(now())

  user    User    @relation(fields: [user_id], references: [id])
  comment Comment @relation(fields: [comment_id], references: [id])

  @@map("likes")
}

model Organizer {
  id       Int @id @default(autoincrement())
  user_id  Int
  event_id Int

  user  User  @relation(fields: [user_id], references: [id])
  event Event @relation(fields: [event_id], references: [id])

  @@map("organizers")
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  start_time  DateTime @db.Time()
  end_time    DateTime @db.Time()
  speakers    String

  organizers     Organizer[]
  event_schedule EventSchedule[]

  @@map("events")
}

model EventSchedule {
  id          Int @id @default(autoincrement())
  event_id    Int
  schedule_id Int

  event    Event    @relation(fields: [event_id], references: [id])
  schedule Schedule @relation(fields: [schedule_id], references: [id])

  @@map("event_schedule")
}

model Schedule {
  id     Int    @id @default(autoincrement())
  year   String
  period String

  registers      Register[]
  event_schedule EventSchedule[]

  @@map("schedule")
}

model Register {
  id          Int @id @default(autoincrement())
  user_id     Int
  schedule_id Int

  user     User     @relation(fields: [user_id], references: [id])
  schedule Schedule @relation(fields: [schedule_id], references: [id])

  @@map("registers")
}

model Establishment {
  id             Int     @id @default(autoincrement())
  name           String
  type           String?
  phone          String?
  instagram      String?
  schedule_days  String?
  address        String?
  schedule_hours String?
  observations   String?
  description    String?
  image          String?

  @@map("establishments")
}
